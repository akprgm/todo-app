{"version":3,"sources":["components/TodoInput.tsx","actions/TodoActions.tsx","actions/types.tsx","components/TodoList.tsx","components/Todo.tsx","reducers/TodoReducer.tsx","reducers/index.tsx","store.tsx","index.tsx"],"names":["TodoInput","useState","newTodo","setNewTodo","dispatch","useDispatch","TextField","className","variant","value","size","onChange","e","target","Button","type","color","onClick","preventDefault","trim","payload","id","uuidv4","text","complete","TodoList","todos","useSelector","state","todoState","map","todo","key","Checkbox","checked","handleToggleTodo","Input","disabled","undefined","defaultValue","todoId","handleUpdateTodo","handleDeleteTodo","Todo","initialState","combineReducers","action","filter","store","createStore","reducers","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60692b37.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { useDispatch } from 'react-redux';\nimport { addTodoAction } from '../actions/TodoActions';\nimport React, { useState, ChangeEvent, FormEvent } from 'react';\nimport { Button, TextField } from '@material-ui/core';\n\nconst TodoInput: React.FC = () => {\n  const [newTodo, setNewTodo] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const handleTodoChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setNewTodo(e.target.value);\n  }\n  const handleAddTodo = (e: FormEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    if (newTodo.trim() === '') return\n    dispatch(addTodoAction({\n      id: uuidv4(),\n      text: newTodo,\n      complete: false\n    }));\n    setNewTodo(\"\");\n  }\n\n  return (\n    <form>\n      <label>\n        <TextField className=\"add-todo-input\" variant=\"outlined\" value={newTodo} size=\"small\" onChange={handleTodoChange} />\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\" onClick={handleAddTodo}>Add Todo</Button>\n      </label>\n    </form>\n  )\n};  \n\nexport default TodoInput;\n","import * as Types from './types';\n\nexport const addTodoAction = (todo: Todo) => ({\n  type: Types.ADD_TODO,\n  payload: todo\n});\n\nexport const updateTodoAction = (text: string, todoId: string) => ({\n  type: Types.UPDATE_TODO,\n  payload: {\n    text,\n    todoId\n  }\n});\n\nexport const toggleTodoAction = (todoId: string) => ({\n  type: Types.TOGGLE_TODO,\n  payload: todoId\n});\n\nexport const deleteTodoAction = (todoId: string) => ({\n  type: Types.DELETE_TODO,\n  payload: todoId\n});\n","export const ADD_TODO = 'add_todo';\nexport const UPDATE_TODO = 'udpate_todo';\nexport const TOGGLE_TODO = 'toggle_todo';\nexport const DELETE_TODO = 'delete_todo';\n","import React, { ChangeEvent } from 'react';\nimport './style.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateTodoAction, toggleTodoAction, deleteTodoAction } from '../actions/TodoActions';\nimport { Input, Checkbox } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete'\n\nconst TodoList: React.FC = () => {\n  const todos = useSelector((state: AppSate) => state.todoState.todos );\n  const dispatch = useDispatch();\n\n  const handleUpdateTodo = (e: ChangeEvent<HTMLInputElement> ) => {\n    dispatch(updateTodoAction(e.target.value, e.target.id));\n  }\n  const handleToggleTodo = (todo: Todo) => {\n    dispatch(toggleTodoAction(todo.id));\n  }\n  const handleDeleteTodo = (todo: Todo) => {\n    dispatch(deleteTodoAction(todo.id));\n  }\n\n  return (\n    <ul className=\"todo-item\">\n      {todos.map((todo: Todo)=> (\n        <li key={todo.id}>\n          <Checkbox  color=\"primary\" checked={todo.complete} onChange={() => handleToggleTodo(todo) }/>\n          <Input type=\"text\" id={todo.id} className={todo.complete? 'complete todo-item-input' :  'todo-item-input' } \n            disabled={todo.complete? true :  undefined } \n            defaultValue={todo.text} \n            onChange={(e: ChangeEvent<HTMLInputElement>) => handleUpdateTodo(e)}\n            />\n          <DeleteIcon color=\"secondary\" onClick={() => handleDeleteTodo(todo)}/>\n        </li>)    \n      )}\n    </ul>\n   )\n}\nexport default TodoList;\n","import React from 'react';\nimport AddTodoForm from './TodoInput';\nimport TodoListItem from './TodoList';\nimport './style.css'\n\nconst Todo: React.FC = () => {\n  return ( \n    <div className=\"todo\">\n      <AddTodoForm></AddTodoForm>\n      <TodoListItem></TodoListItem>\n    </div>\n   );\n}\n\nexport default Todo;\n","import { v4 as uuidv4 } from 'uuid';\nimport * as Types from '../actions/types';\n\nexport const initialState: TodoState = {\n  todos: [{\n    id: uuidv4(),\n    text: 'Learn TypeScript',\n    complete: true\n  }, {\n    id: uuidv4(),\n    text: 'Create Sample Application',\n    complete: false\n  }]\n}\n\nexport default (state = initialState, action: any) => {\n  switch(action.type) {\n    case Types.ADD_TODO:\n      return {\n        ...state,\n        todos: [action.payload, ...state.todos]\n      }\n    case Types.UPDATE_TODO:\n      return {\n        ...state,\n        todos: state.todos.map((todo) => \n          todo.id === action.payload.todoId ? {...todo, text: action.payload.text } : todo\n        )\n      }\n    case Types.TOGGLE_TODO:\n      return {\n        ...state,\n        todos: state.todos.map((todo) =>\n          todo.id === action.payload ? {...todo, complete: !todo.complete } : todo\n        )\n      }\n    case Types.DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => \n          todo.id !== action.payload\n        )\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux';\nimport TodoReducer from './TodoReducer';\n\nexport default combineReducers({\n  todoState: TodoReducer,\n})\n","import reducers from './reducers';\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nexport const store = createStore(\n  reducers,\n  composeWithDevTools()\n)\n ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todo from './components/Todo';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Todo />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}